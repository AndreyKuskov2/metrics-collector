package main

import (
	"go/ast"

	"golang.org/x/tools/go/analysis"
)

// Основная переменная анализатор
var Analyzer = &analysis.Analyzer{
	Name: "noosexit",
	Doc:  "check for os.Exit calls in main function of main package",
	Run:  run,
}

func run(pass *analysis.Pass) (interface{}, error) {
	for _, file := range pass.Files {
		if isGenerated(file) {
			continue
		}
		if file.Name.Name == "main" {
			for _, decl := range file.Decls {
				ast.Inspect(decl, func(n ast.Node) bool {
					switch x := n.(type) {
					case *ast.FuncDecl:
						for _, stmt := range x.Body.List {
							ast.Inspect(stmt, func(n ast.Node) bool {
								switch x := n.(type) {
								case *ast.CallExpr:
									ast.Inspect(x.Fun, func(n ast.Node) bool {
										switch fun := n.(type) {
										case *ast.Ident:
											if fun.Name == "Exit" {
												pass.Reportf(fun.Pos(), "os.Exit call is not allowed in main function")
											}
										}
										return true
									})
								}
								return true
							})
						}
					}
					return true
				})
			}
		}
	}
	return nil, nil
}

// isGenerated проверяет, является ли файл сгенерированным
func isGenerated(file *ast.File) bool {
	for _, comment := range file.Comments {
		for _, c := range comment.List {
			if c.Text == "// Code generated by 'go test'. DO NOT EDIT." {
				return true
			}
		}
	}
	return false
}
