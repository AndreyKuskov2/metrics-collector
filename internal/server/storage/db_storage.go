package storage

import (
	"context"

	"github.com/AndreyKuskov2/metrics-collector/internal/models"
	"github.com/AndreyKuskov2/metrics-collector/internal/server/config"
	"github.com/AndreyKuskov2/metrics-collector/pkg/logger"

	// _ "github.com/jackc/pgx/v5"
	// _ "github.com/lib/pq"

	// "github.com/jackc/pgx/stdlib"
	// "github.com/jackc/pgx/stdlib"
	"github.com/jackc/pgx/v5/pgxpool"
)

type DBStorage struct {
	DB *pgxpool.Pool
}

func NewDBStorage(cfg *config.ServerConfig) (*DBStorage, error) {
	// db, err := sql.Open("pgx", cfg.DatabaseDSN)
	// if err != nil {
	// 	return nil, err
	// }

	// err = db.Ping()
	// if err != nil {
	// 	logger.Log.Infof("ERROR IN DB STORAGE CONSTRUCTOR: %s", err)
	// 	return nil, err
	// }
	// logger.Log.Infof("NO ERROR IN CONSTRUCTOR")

	// conn, err := pgx.Connect(context.Background(), cfg.DatabaseDSN)
	// if err != nil {
	// 	// fmt.Println(err)
	// 	// fmt.Fprintf(os.Stderr, "Unable to connect to database: %v\n", err)
	// 	// os.Exit(1)
	// 	return nil, err
	// }
	// defer conn.Close(context.Background())

	pool, err := pgxpool.New(context.Background(), cfg.DatabaseDSN)
	if err != nil {
		return nil, err
	}
	logger.Log.Infof("CREATE BD POOL")

	// db := stdlib.OpenDBFromPool(pool)

	err = pool.Ping(context.Background())
	if err != nil {
		logger.Log.Infof("ERROR IN DB STORAGE CONSTRUCTOR: %s", err)
		return nil, err
	}
	logger.Log.Infof("NO ERROR IN CONSTRUCTOR")

	return &DBStorage{
		DB: pool,
	}, nil
}

// func (s *DBStorage) CloseDB() error {
// 	if err := s.DB.Close(); err != nil {
// 		return err
// 	}
// 	return nil
// }

func (s *DBStorage) Ping(ctx context.Context) error {
	return s.DB.Ping(ctx)
}

func (s *DBStorage) CreateTables() error {
	// _, err := s.DB.Exec(`CREATE TABLE IF NOT EXISTS metrics (
	// 	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	// 	type TEXT NOT NULL,
	// 	name TEXT NOT NULL,
	// 	value DOUBLE PRECISION,
	// 	delta BIGINT,
	// 	timestamp TIMESTAMP NOT NULL
	// );
	// CREATE INDEX IF NOT EXISTS idx_metrics_name ON metrics (name);`)
	// if err != nil {
	// 	return fmt.Errorf("failed to create table: %w", err)
	// }
	return nil
}

func (s *DBStorage) GetAllMetrics() (map[string]*models.Metrics, error) {
	// rows, err := s.DB.Query("SELECT * FROM metrics;")
	// if err != nil {
	// 	return nil, err
	// }
	// defer rows.Close()

	// if !rows.Next() {
	// 	return nil, fmt.Errorf("no metrics found")
	// }

	// var metrics = make(map[string]*models.Metrics)
	// for rows.Next() {
	// 	var metric models.Metrics
	// 	err = rows.Scan(&metric.ID, &metric.MType, &metric.Value, &metric.Delta)
	// 	if err != nil {
	// 		return nil, fmt.Errorf("failed to scan metrics: %w", err)
	// 	}
	// 	metrics[metric.ID] = &metric
	// }

	// if err = rows.Err(); err != nil {
	// 	return nil, fmt.Errorf("failed to iterate over metrics: %w", err)
	// }
	return nil, nil
}

func (s *DBStorage) GetMetric(metricName string) (*models.Metrics, bool) {
	// if metric, ok := s.memStorage[metricName]; ok {
	// 	return metric, true
	// }
	return nil, false
}

func (s *DBStorage) UpdateMetric(metric *models.Metrics) error {
	// s.memStorage[metric.ID] = metric
	// _, err := s.DB.Exec(`INSERT INTO metrics (type, name, value, delta, timestamp)
	// VALUES ($1, $2, $3, $4, $5)`,
	// 	metric.MType, metric.ID, metric.Value, metric.Delta, time.Now())
	// if err != nil {
	// 	// log.Println("Db faild to insert",err)
	// 	return fmt.Errorf("failed to insert metric: %w", err)
	// }
	return nil
}
